<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three.js 3D Model</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/examples/js/controls/OrbitControls.js"></script>
    <style>
        body { margin: 0; overflow: hidden; }
        #container { width: 100%; height: 100vh; }
        #upload { position: absolute; top: 10px; left: 10px; z-index: 100; }
    </style>
</head>
<body>
    <div id="container"></div>
    <input type="file" id="upload" accept=".glb, .gltf" />
    <script>
        // Setup scene, camera, and renderer
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('container').appendChild(renderer.domElement);

        // Add lighting
        const light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(5, 5, 5).normalize();
        scene.add(light);

        const ambientLight = new THREE.AmbientLight(0x404040); // soft white light
        scene.add(ambientLight);

        // Variables for the model
        let model;
        const loader = new THREE.GLTFLoader();

        // Load initial model
        function loadModel(url) {
            loader.load(url, function (gltf) {
                if (model) scene.remove(model);
                model = gltf.scene;
                scene.add(model);
                model.position.set(0, 0, 0);
            }, undefined, function (error) {
                console.error(error);
            });
        }

        loadModel('path/to/your/Marco.glb');

        // Handle file upload
        document.getElementById('upload').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const contents = e.target.result;
                    loader.parse(contents, '', function (gltf) {
                        if (model) scene.remove(model);
                        model = gltf.scene;
                        scene.add(model);
                        model.position.set(0, 0, 0);
                    });
                };
                reader.readAsArrayBuffer(file);
            }
        });

        // Add OrbitControls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableZoom = false; // Disable zoom to only allow rotation

        // Position the camera
        camera.position.z = 5;

        // Handle scroll input
        function onDocumentMouseWheel(event) {
            if (model) {
                model.rotation.y += event.deltaY * 0.005; // Adjust the multiplier as needed
            }
        }

        // Handle touch input for mobile
        let lastTouchX = 0;
        function onDocumentTouchMove(event) {
            if (model && event.touches.length == 1) {
                const touch = event.touches[0];
                const deltaX = touch.clientX - lastTouchX;
                model.rotation.y += deltaX * 0.01; // Adjust the multiplier as needed
                lastTouchX = touch.clientX;
            }
        }

        function onDocumentTouchStart(event) {
            if (event.touches.length == 1) {
                lastTouchX = event.touches[0].clientX;
            }
        }

        // Add event listeners
        window.addEventListener('wheel', onDocumentMouseWheel, false);
        window.addEventListener('touchmove', onDocumentTouchMove, false);
        window.addEventListener('touchstart', onDocumentTouchStart, false);

        // Resize renderer on window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        animate();
    </script>
</body>
</html>
